#!/usr/bin/env node

require("dotenv").config();

/**
 * Module dependencies.
 */
var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Setup Socket.IO
 */
const { Server } = require("socket.io");
const io = new Server(server, {
  cors: {
    origin: "https://cestprevu-frontend.vercel.app",
    methods: ["GET", "POST", "PATCH"],
    allowedHeaders: ["Content-Type", "Authorization"],
    credentials: true,
  },
});
app.set("socketio", io);

io.on("connection", (socket) => {
  console.log("ðŸ§© Un utilisateur sâ€™est connectÃ© en socket");

  socket.on("joinRoom", (listId) => {
    socket.join(listId);
    console.log("ðŸ“¥ Rejoint la room :", listId);
  });

  socket.on("leaveRoom", (listId) => {
    socket.leave(listId);
    console.log("ðŸ“¤ QuittÃ© la room :", listId);
  });
});

/**
 * Start server
 */
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) return val;
  if (port >= 0) return port;
  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== 'listen') throw error;

  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}